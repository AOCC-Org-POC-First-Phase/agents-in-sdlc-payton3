---
// Sudoku game page
import Layout from '../layouts/Layout.astro';
---

<Layout title="Sudoku Game">
  <main class="min-h-screen bg-gray-900 text-white">
    <div class="container mx-auto px-4 py-8">
      <h1 class="text-4xl font-bold text-center mb-8 text-blue-400">ðŸ§© Sudoku Game</h1>
      
      <!-- Game Controls -->
      <div class="flex justify-center mb-8">
        <div class="bg-gray-800 rounded-lg p-6 shadow-lg">
          <div class="flex flex-wrap gap-4 justify-center items-center">
            <select id="difficulty" class="bg-gray-700 text-white px-4 py-2 rounded border border-gray-600 focus:border-blue-500 focus:outline-none">
              <option value="easy">Easy</option>
              <option value="medium" selected>Medium</option>
              <option value="hard">Hard</option>
            </select>
            
            <button id="new-game" class="bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded font-semibold transition-colors">
              New Game
            </button>
            
            <button id="hint-btn" class="bg-green-600 hover:bg-green-700 px-6 py-2 rounded font-semibold transition-colors">
              Hint
            </button>
            
            <button id="solve-btn" class="bg-red-600 hover:bg-red-700 px-6 py-2 rounded font-semibold transition-colors">
              Show Solution
            </button>
          </div>
        </div>
      </div>

      <!-- Game Status -->
      <div id="game-status" class="text-center mb-6">
        <p class="text-gray-400">Click "New Game" to start playing</p>
      </div>

      <!-- Sudoku Board -->
      <div class="flex justify-center mb-8">
        <div id="sudoku-board" class="grid grid-cols-9 gap-1 bg-gray-700 p-4 rounded-lg shadow-lg">
          <!-- Board cells will be generated by JavaScript -->
        </div>
      </div>

      <!-- Number Selector -->
      <div class="flex justify-center mb-8">
        <div class="bg-gray-800 rounded-lg p-4 shadow-lg">
          <p class="text-center mb-4 text-gray-300">Select a number:</p>
          <div class="flex gap-2 justify-center">
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="1">1</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="2">2</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="3">3</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="4">4</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="5">5</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="6">6</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="7">7</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="8">8</button>
            <button class="number-btn bg-gray-600 hover:bg-blue-600 w-12 h-12 rounded font-bold transition-colors" data-num="9">9</button>
            <button class="number-btn bg-red-600 hover:bg-red-700 w-12 h-12 rounded font-bold transition-colors" data-num="0">âœ•</button>
          </div>
        </div>
      </div>

      <!-- Instructions -->
      <div class="max-w-2xl mx-auto bg-gray-800 rounded-lg p-6 shadow-lg">
        <h2 class="text-xl font-bold mb-4 text-blue-400">How to Play:</h2>
        <ul class="text-gray-300 space-y-2">
          <li>â€¢ Click on a cell to select it, then click a number to place it</li>
          <li>â€¢ Each row, column, and 3Ã—3 box must contain numbers 1-9 without repetition</li>
          <li>â€¢ Use the "Hint" button if you need help finding the next move</li>
          <li>â€¢ Click "âœ•" to clear a cell</li>
          <li>â€¢ Complete the puzzle by filling all empty cells correctly</li>
        </ul>
      </div>
    </div>
  </main>
</Layout>

<style>
  #sudoku-board {
    width: 450px;
    height: 450px;
  }
  
  .cell {
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .cell.empty {
    background-color: #374151;
    border: 2px solid #4b5563;
  }
  
  .cell.filled {
    background-color: #1f2937;
    border: 2px solid #6b7280;
    color: #60a5fa;
  }
  
  .cell.selected {
    border-color: #3b82f6 !important;
    background-color: #1e3a8a !important;
  }
  
  .cell.hint {
    background-color: #065f46 !important;
    border-color: #10b981 !important;
    animation: pulse 1s ease-in-out 2;
  }
  
  .cell.error {
    background-color: #7f1d1d !important;
    border-color: #ef4444 !important;
    animation: shake 0.5s ease-in-out;
  }
  
  /* Thick borders for 3x3 box separation */
  .cell:nth-child(3n) {
    border-right-width: 3px;
    border-right-color: #9ca3af;
  }
  
  .cell:nth-child(n+19):nth-child(-n+27),
  .cell:nth-child(n+46):nth-child(-n+54) {
    border-bottom-width: 3px;
    border-bottom-color: #9ca3af;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }
  
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }
</style>

<script>
  // Sudoku game state
  let gameSession = null;
  let selectedCell = null;
  let selectedNumber = null;
  let currentBoard = [];

  // Initialize the game
  document.addEventListener('DOMContentLoaded', function() {
    setupEventListeners();
    createBoard();
  });

  function setupEventListeners() {
    document.getElementById('new-game').addEventListener('click', startNewGame);
    document.getElementById('hint-btn').addEventListener('click', getHint);
    document.getElementById('solve-btn').addEventListener('click', showSolution);
    
    // Number selector buttons
    document.querySelectorAll('.number-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        // Remove previous selection
        document.querySelectorAll('.number-btn').forEach(b => b.classList.remove('bg-blue-600'));
        document.querySelectorAll('.number-btn').forEach(b => b.classList.add('bg-gray-600'));
        
        // Highlight selected number
        this.classList.remove('bg-gray-600', 'bg-red-600');
        this.classList.add(this.dataset.num === '0' ? 'bg-red-700' : 'bg-blue-600');
        
        selectedNumber = parseInt(this.dataset.num);
      });
    });
  }

  function createBoard() {
    const board = document.getElementById('sudoku-board');
    board.innerHTML = '';
    
    for (let i = 0; i < 81; i++) {
      const cell = document.createElement('div');
      cell.className = 'cell empty';
      cell.dataset.index = i;
      cell.addEventListener('click', () => selectCell(i));
      board.appendChild(cell);
    }
  }

  function selectCell(index) {
    // Remove previous selection
    document.querySelectorAll('.cell').forEach(cell => cell.classList.remove('selected'));
    
    // Select current cell
    const cell = document.querySelector(`[data-index="${index}"]`);
    cell.classList.add('selected');
    selectedCell = index;
    
    // If a number is selected, make the move
    if (selectedNumber !== null && gameSession) {
      makeMove(index, selectedNumber);
    }
  }

  async function startNewGame() {
    const difficulty = document.getElementById('difficulty').value;
    
    try {
      const response = await fetch('/api/sudoku/new', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ difficulty })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        gameSession = data.session_id;
        currentBoard = data.board;
        updateBoard(data.board);
        updateStatus(data.message);
      } else {
        updateStatus(`Error: ${data.error}`, 'error');
      }
    } catch (error) {
      updateStatus(`Failed to start new game: ${error.message}`, 'error');
    }
  }

  async function makeMove(cellIndex, number) {
    if (!gameSession) {
      updateStatus('Please start a new game first', 'error');
      return;
    }
    
    const row = Math.floor(cellIndex / 9);
    const col = cellIndex % 9;
    
    try {
      const response = await fetch('/api/sudoku/move', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          session_id: gameSession,
          row: row,
          col: col,
          num: number
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        currentBoard = data.board;
        updateBoard(data.board);
        updateStatus(data.message);
        
        if (data.is_complete) {
          updateStatus('ðŸŽ‰ Congratulations! You solved the puzzle! ðŸŽ‰', 'success');
        }
      } else {
        updateStatus(data.message, 'error');
        // Highlight error cell
        const cell = document.querySelector(`[data-index="${cellIndex}"]`);
        cell.classList.add('error');
        setTimeout(() => cell.classList.remove('error'), 500);
      }
    } catch (error) {
      updateStatus(`Failed to make move: ${error.message}`, 'error');
    }
  }

  async function getHint() {
    if (!gameSession) {
      updateStatus('Please start a new game first', 'error');
      return;
    }
    
    try {
      const response = await fetch('/api/sudoku/hint', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ session_id: gameSession })
      });
      
      const data = await response.json();
      
      if (response.ok && data.hint) {
        updateStatus(`ðŸ’¡ ${data.message}`);
        
        // Highlight the hint cell
        const cellIndex = data.row * 9 + data.col;
        const cell = document.querySelector(`[data-index="${cellIndex}"]`);
        cell.classList.add('hint');
        setTimeout(() => cell.classList.remove('hint'), 2000);
      } else {
        updateStatus(data.message);
      }
    } catch (error) {
      updateStatus(`Failed to get hint: ${error.message}`, 'error');
    }
  }

  async function showSolution() {
    if (!gameSession) {
      updateStatus('Please start a new game first', 'error');
      return;
    }
    
    try {
      const response = await fetch('/api/sudoku/solve', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ session_id: gameSession })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        updateBoard(data.solution);
        updateStatus('Complete solution shown');
      } else {
        updateStatus(`Error: ${data.error}`, 'error');
      }
    } catch (error) {
      updateStatus(`Failed to show solution: ${error.message}`, 'error');
    }
  }

  function updateBoard(board) {
    const cells = document.querySelectorAll('.cell');
    
    for (let i = 0; i < 81; i++) {
      const row = Math.floor(i / 9);
      const col = i % 9;
      const value = board[row][col];
      
      const cell = cells[i];
      cell.textContent = value === 0 ? '' : value;
      cell.className = 'cell ' + (value === 0 ? 'empty' : 'filled');
    }
  }

  function updateStatus(message, type = 'info') {
    const status = document.getElementById('game-status');
    
    let className = 'text-gray-400';
    if (type === 'error') className = 'text-red-400';
    if (type === 'success') className = 'text-green-400';
    
    status.innerHTML = `<p class="${className}">${message}</p>`;
  }
</script>